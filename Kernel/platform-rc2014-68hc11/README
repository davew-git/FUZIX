Initial code for a bring up 68HC11 RC2014 banked memory platform based on the
6303 code base. This probably isn't what we finally want to end up with as a
model but it will help us get there.

Current model

	0x0000-0xBFFF	3 48K pages treated as bank
	C000-EFFF	Fixed common and high space
	F000-F03F	Internal I/O
	F040-F1FF	Internal RAM (unbanked)
	F200-FDFF	Common
	FE00-FEFF	I/O
	FF00-FFFF	Common and vectors

	For user BE00-BFFF is udata stash


Proposed memory mapping

	0x0000-0x00BF	Direct page (user)
	0x00C0-0x00FF	Direct page (kernel)
	0x0100-0x01FF	Loader space for now (can be reclaimed later)
	0x0200-0xEFFF	Kernel
	0xF000-0xF03F   Internal I/O (other possible place)
	0xF040-0xF1FF	Internal RAM (unbankable)
	0xF200-0xFDFF	Common data and whatever code fills the rest
	0xFE00-0xFEFF	I/O
	0xFF00-0xFFDF	Maybe move istack here ?
	0xFFE0-0xFFFF	Vectors

In user space

	0x0000-0x00BF	Direct page (user)
	0x00C0-0x00FF	Direct page (kernel)
	0x0100-0xBFFF	User space
	0xC000-0xEFFF	Kernel upper code
	0xF000-0xF03F   Internal I/O
	0xF040-0xF1FF	Internal RAM (unbankable)
	0xF200-0xFDFF	Common data and whatever code fills the rest
	0xFE00-0xFEFF	I/O
	0xFF00-0xFFDF
	0xFFE0-0xFFFF	Vectors

Hardware Arrangement

68HC11 CPU
FE00-FEFF hardwired as an I/O window that generates Z80 I/O cycles 0-FF on the
RC2014 bus
512K RAM/ROM (eventually should be able to also switch to the flat model)
Internal UART

Things to address
- Finish debugging task switching and fork
	Right now we seem to fork ok but the udata page tables for the parent
	are wrong when we switch to it which suggests it's not set up right
	somewhere
- Save the right internal registers on interrupt (mostly right)
- Dynamic buffer allocation
- SPI bitbang port
- Making the UART driver properly IRQ driven for input with its own buffer
  and separate to the Fuzix level interrupts
- Proper two level interrupt handling so that the timer drives Fuzix and
  the other stuff is queued
- Don't disable all interrupts in the Fuzix paths
- Add device support for some of the RC2014 external devices

Put the loader on sector 0
Put the kernel on sector 1+


Ideal end mode is probably 512K flat

64K switching but with

0000-EFFF	User space
F000-F03F	I/O window
F040-F1FF	Fixed as common space (common data, disk I/O etc)
F200-FFFF	Common read only copies and vectors

Will have Z180 like problem with swap ?
